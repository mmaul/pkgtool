include "PKGTOOL/pkgtool";

open PkgTool;
open Filename;

SETUP_LOG="scoop.log";

var HOME = 
  let ?h = Env::getenv "HOME" in
    if h!="" then h 
    elif PLAT_WIN32 then Env::getenv "USERPROFILE"
    else ""
    endif
;
if HOME == "" do
    setup_fail$ "HOME environment variable is not set.  Please set HOME before building."; 
	System::exit 1;
done 

var FELIX_HOME = HOME.join(".felix");

var LITTERBOX = FELIX_HOME.join("litterbox");

var LITTERBOX_URL = 'https://github.com/mmaul/litterbox.git';

proc get_pkg (pkg:string,dest:string) {
  //repo_url:string,dest:string
  cfg = read_cfg((LITTERBOX.join(pkg)).join("README.md"));
  match get cfg 'PKG_URL' with
  |Some ?pkg_url => { git_get(pkg_url,dest); }
  |_ => { setup_fail("No package url present in package definition.");  }
  endmatch;
}

proc build() {

}

proc install () {

}

proc search () {

}

proc refresh () {
    git_get(LITTERBOX_URL,LITTERBOX);

}

proc run() {
   C_hack::ignore(FileSystem::unlink_file(SETUP_LOG));    
    banner("Felix package manager");
    var opts = Empty[string];
    var valid_opts = 0;
    match tail(System::args()) with
    |Cons (?command,?options) => {
      //for arg in options do
      //  match arg with
      //  |?option when option.startswith "-L" => { valid_opts++; EXTRA_LIBDIR += " " + arg; }
      //  |?option when option.startswith "-I" => { valid_opts++; EXTRA_INCDIR += " " + arg; }
      //  |?option => { opts += option; }
      //  endmatch;
      //done 

        match command with
        |?cmd when cmd == "scoop" => { 
             match options with
             |Cons (?pkg,Empty[string]) => {
                phase(q"Scooping package $(pkg) from litterbox.",proc () { get_pkg(pkg, pkg); });
             }
             |_ => {
               setup_fail("No package specified");
             }
             endmatch;
           }
        |?cmd when cmd == "install" => { 
          banner("Installing package");
          match options with
          |Cons (?pkg,Empty[string]) => {
            val pkg_dir = (LITTERBOX.join("build")).join(pkg);
            //phase(q"Scooping package $(pkg) from litterbox.",
            //      proc () { get_pkg(pkg,pkg_dir);
            //});
            phase(q"Installing $(pkg)", proc () {
              task$ strip(run_cmd("flx "+pkg_dir.join("setup")+" install --build-dir="+ pkg_dir, "Installation failed."));
              });
            
          }
          |_ => {
            setup_fail("No package specified");
          }
          endmatch;

        }
      |?cmd when cmd == "search" => { 
          banner("Search");
          phase("Searching Repository",search);
        }
      |?cmd when cmd == "refresh" => { 
          banner("Refresh");
          phase("Refresh Repository",refresh);
        }
      |?cmd => { invalid_cmd(cmd); }
      endmatch;
    }
    |_ => { invalid_cmd("?"); }
    endmatch;


}

run();